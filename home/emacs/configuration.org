* My emacs literate config - Foreword
This is my configuration for for emacs! It is written using org-babel which
places the contents of various code blocks into their coresponding file.

To tangle the contents I use org-babel-tangle (tangles current buffer) (which is
bound to C-c C-v t).
* Design goals

* Configuration
** Header
This will generate a header at the top of the init.el and the early-init.el
#+begin_src emacs-lisp :tangle init.el  
;; -*- lexical-binding: t -*-
;; This file has been generated from configuration.org file. DO NOT EDIT.
;; Sources are available from https://github.com/lakrestofer/dotfiles/tree/main/.config/emacs
#+end_src
#+begin_src emacs-lisp :tangle early-init.el  
;; -*- lexical-binding: t -*-
;; This file has been generated from dotemacs.org file. DO NOT EDIT.
;; Sources are available from https://github.com/lakrestofer/dotfiles/tree/main/.config/emacs
#+end_src
** Early init
In the begining of the emacs startup process (as documented in [[https://
www.gnu.org/software/emacs/manual/html_node/elisp/System-Interface.html][the
manual]]) the early-init file is loaded. Here we set any configs that we want
to apply before the rest of the startup takes place. Since the default package
manager is loaded here we disable it. We also disable some gui elements which
we are not interested in. A speed-up hack that we also perform is to temporarily
remove the limit for the garbage-collector, allowing the startup proccess to run
without the garbage collector pausing execution for cleanup.

#+begin_src emacs-lisp :tangle early-init.el
    ;; disable some gui elements
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    ;; disables package.el
    (setq package-enable-at-startup nil)

    ;; disable the startup screen
    (setq-default inhibit-startup-message t
          initial-scratch-message "")

    ;; we temporarily allow the gc to leak memory
    (setq gc-cons-threshold most-positive-fixnum)

    (add-hook 'emacs-startup-hook (lambda () (setq gc-conf-threshold (* 40 1024 1024))))
    ;; increase the amount of data that can be read from subprocess in a single go
    (setq read-process-output-max (* 4 1024 1024)) ;; 4 mb
#+end_src
** Package manager bootstrap
Here we install elpaca and 
#+begin_src emacs-lisp :tangle init.el
  (defvar elpaca-installer-version 0.11)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1 :inherit ignore
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (<= emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                    ,@(when-let* ((depth (plist-get order :depth)))
                                                        (list (format "--depth=%d" depth) "--no-single-branch"))
                                                    ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src
#+begin_src emacs-lisp :tangle init.el
  ;; Enable use-package :ensure support for Elpaca.
  (elpaca elpaca-use-package
    (elpaca-use-package-mode))
  (setq use-package-always-ensure t)
#+end_src
Since elpacka downloads packages asynchronously we need to block manually here
#+begin_src emacs-lisp :tangle init.el
  (use-package no-littering)
  (elpaca-wait)
#+end_src
** Theming and visuals
**** Theme
For now we set a builtin theme
#+begin_src emacs-lisp :tangle init.el
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-gruvbox t)
    (doom-themes-org-config))
#+end_src
**** Font
set mono and variabled pitch fonts
#+begin_src emacs-lisp :tangle init.el
  (set-face-attribute 'default nil :font "Fira Code" :height 140)
 #+end_src
**** Some other visual improvements
#+begin_src emacs-lisp :tangle init.el
  ;; requires emacs v29
  (pixel-scroll-precision-mode 1)
  (blink-cursor-mode 0)
#+end_src
#+begin_src emacs-lisp :tangle init.el
  (use-package solaire-mode
    :config
    (solaire-global-mode +1))
#+end_src
** Keybinds
#+begin_src emacs-lisp :tangle init.el
  (use-package which-key
    :config
    (which-key-mode))
#+end_src

#+begin_src emacs-lisp :tangle init.el
  (use-package meow
      :config
      (defun meow-setup ()
        (setq meow-cheatsheet-layout meow-cheatsheet-layout-colemak-dh)
        (setq meow-cheatsheet-physical-layout meow-cheatsheet-physical-layout-iso)
        (setq meow-expand-hint-remove-delay 3)
        (meow-motion-define-key
         ;; Use e to move up, n to move down.
         ;; Since special modes usually use n to move down, we only overwrite e here.
         '("n" . meow-prev)
         '("<escape>" . ignore))
        (meow-leader-define-key
         '("?" . meow-cheatsheet)
         '("1" . meow-digit-argument)
         '("2" . meow-digit-argument)
         '("3" . meow-digit-argument)
         '("4" . meow-digit-argument)
         '("5" . meow-digit-argument)
         '("6" . meow-digit-argument)
         '("7" . meow-digit-argument)
         '("8" . meow-digit-argument)
         '("9" . meow-digit-argument)
         '("0" . meow-digit-argument))
        (meow-normal-define-key
         ;; movement
         '("n" . meow-left)
         '("N" . meow-left-expand)
         '("e" . meow-next)
         '("E" . meow-next-expand)
         '("i" . meow-prev)
         '("I" . meow-prev-expand)
         '("o" . meow-right)
         '("O" . meow-right-expand)
         '("f" . meow-find)
         '("t" . meow-till)
         ;; word movement
         '("b" . meow-back-word)
         '("B" . meow-back-symbol)
         '("w" . meow-next-word)
         '("W" . meow-next-symbol)
         ;; arguments
         '("0" . meow-expand-0)
         '("1" . meow-expand-1)
         '("2" . meow-expand-2)
         '("3" . meow-expand-3)
         '("4" . meow-expand-4)
         '("5" . meow-expand-5)
         '("6" . meow-expand-6)
         '("7" . meow-expand-7)
         '("8" . meow-expand-8)
         '("9" . meow-expand-9)
         '("-" . negative-argument)
         '(";" . meow-reverse)
         ;; selection
         '("," . meow-inner-of-thing)
         '("." . meow-bounds-of-thing)
         '("[" . meow-beginning-of-thing)
         '("]" . meow-end-of-thing)
         '("g" . meow-cancel-selection)
         '("h" . meow-block)
         '("H" . meow-to-block)
         '("l" . meow-line)
         ;; search
         '("/" . meow-visit)
         '("v" . meow-search)
         ;; to insert mode
         '("a" . meow-append)
         '("A" . meow-open-below)
         '("c" . meow-change)
         '("s" . meow-insert)
         '("S" . meow-open-above)
         ;; other
         '("G" . meow-grab)
         '("j" . meow-join)
         '("k" . meow-kill)
         '("d" . meow-delete)
         '("D" . meow-backward-delete)
         '("L" . meow-goto-line)
         '("m" . meow-mark-word)
         '("M" . meow-mark-symbol)
         '("p" . meow-yank)
         '("q" . meow-quit)
         '("r" . meow-replace)
         '("u" . meow-undo)
         '("U" . meow-undo-in-selection)
         '("y" . meow-save)
         '("z" . meow-pop-selection)
         '("'" . repeat)
         '("<escape>" . ignore)))
      (meow-setup)
      (meow-global-mode 1))
#+end_src
** Information display
*** Dashboard
#+begin_src txt :tangle banner.txt
███████╗███╗   ███╗ █████╗  ██████╗███████╗
██╔════╝████╗ ████║██╔══██╗██╔════╝██╔════╝
█████╗  ██╔████╔██║███████║██║     ███████╗
██╔══╝  ██║╚██╔╝██║██╔══██║██║     ╚════██║
███████╗██║ ╚═╝ ██║██║  ██║╚██████╗███████║
╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚══════╝
#+end_src

#+begin_src emacs-lisp :tangle init.el
  (use-package page-break-lines)
  (use-package projectile)
  (use-package all-the-icons)
  (use-package dashboard
    :config
    (setq dashboard-icon-type 'all-the-icons)  ; use `all-the-icons' package
    (setq dashboard-startup-banner (expand-file-name "banner.txt" user-emacs-directory))
    (setq dashboard-banner-logo-title nil)
    (setq dashboard-center-content t)
    (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
    (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
    (dashboard-setup-startup-hook))
#+end_src
** Org mode

#+begin_src emacs-lisp :tangle init.el
  (use-package org
    :ensure nil ;; use builtin
    :hook (org-mode . org-indent-mode))
#+end_src
** Interactive menues and completion
#+begin_src emacs-lisp :tangle init.el
  (use-package consult
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Tweak the register preview for `consult-register-load',
    ;; `consult-register-store' and the built-in commands.  This improves the
    ;; register formatting, adds thin separator lines, register sorting and hides
    ;; the window mode line.
    (advice-add #'register-preview :override #'consult-register-window)
    (setq register-preview-delay 0.5)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep consult-man
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
    )
#+end_src

#+begin_src emacs-lisp :tangle init.el
  (use-package vertico
    :custom
    ;; (vertico-scroll-margin 0) ;; Different scroll margin
    (vertico-count 20) ;; Show more candidates
    (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
    ;; (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
    :init
    (vertico-mode))
#+end_src

#+begin_src emacs-lisp :tangle init.el
  (use-package corfu
    :init
    (global-corfu-mode))
#+end_src
* Appendix
# This footer will promt the user to tangle on save
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
# End:
