* My emacs literate config - Foreword
This is my configuration for for emacs! It is written using org-babel which
places the contents of various code blocks into their coresponding file.

To tangle the contents I use org-babel-tangle (tangles current buffer) (which is
bound to C-c C-v t).
* Design goals
- [ ] https://www.d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5
- [ ] https://github.com/bluzky/relysium
  
* Configuration
** Header
This will generate a header at the top of the init.el and the early-init.el
#+begin_src emacs-lisp :tangle init.el  
;; -*- lexical-binding: t -*-
;; This file has been generated from configuration.org file. DO NOT EDIT.
;; Sources are available from https://github.com/lakrestofer/dotfiles/tree/main/.config/emacs
#+end_src
#+begin_src emacs-lisp :tangle early-init.el  
;; -*- lexical-binding: t -*-
;; This file has been generated from dotemacs.org file. DO NOT EDIT.
;; Sources are available from https://github.com/lakrestofer/dotfiles/tree/main/.config/emacs
#+end_src
** Early init
In the begining of the emacs startup process (as documented in [[https://
www.gnu.org/software/emacs/manual/html_node/elisp/System-Interface.html][the
manual]]) the early-init file is loaded. Here we set any configs that we want
to apply before the rest of the startup takes place. Since the default package
manager is loaded here we disable it. We also disable some gui elements which
we are not interested in. A speed-up hack that we also perform is to temporarily
remove the limit for the garbage-collector, allowing the startup proccess to run
without the garbage collector pausing execution for cleanup.

#+begin_src emacs-lisp :tangle early-init.el
;; disable some gui elements
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
;; disables package.el
(setq package-enable-at-startup nil)

;; disable the startup screen
(setq-default inhibit-startup-message t
  	      initial-scratch-message "")

;; we temporarily allow the gc to leak memory
(setq gc-cons-threshold most-positive-fixnum)

(add-hook 'emacs-startup-hook (lambda () (setq gc-conf-threshold (* 40 1024 1024))))
;; increase the amount of data that can be read from subprocess in a single go
(setq read-process-output-max (* 4 1024 1024)) ;; 4 mb
#+end_src
** Package manager bootstrap
Here we install elpaca and 
#+begin_src emacs-lisp :tangle init.el
(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src
#+begin_src emacs-lisp :tangle init.el
;; Enable use-package :ensure support for Elpaca.
(elpaca elpaca-use-package
  (elpaca-use-package-mode))
;; (setq use-package-compute-statistics t)
(setq use-package-always-ensure t)
#+end_src
Since elpacka downloads packages asynchronously we need to block manually here
#+begin_src emacs-lisp :tangle init.el
(use-package no-littering)
(elpaca-wait)
#+end_src
** Performance tuning
#+begin_src emacs-lisp :tangle init.el
(use-package gcmh
  ;; :ensure (:host "github.com" :repo "emacsmirror/gcmh" :depth 1 :main "gcmh.el")
  :init
  (setq gcmh-idle-delay 'auto)
  (gcmh-mode 1))  
#+end_src
** Some nice default behaviour
#+begin_src emacs-lisp :tangle init.el
(setq history-length 25)
(savehist-mode 1)
(save-place-mode 1)
(setq use-dialog-box nil)
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
#+end_src
** Theming and visuals
**** Theme
For now we set a builtin theme
#+begin_src emacs-lisp :tangle init.el
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-gruvbox t)
  (doom-themes-org-config))
#+end_src
**** Font
set mono and variabled pitch fonts
#+begin_src emacs-lisp :tangle init.el
(defun apply-font-config ()
  "applies the font of choice, cozette"
  (set-face-attribute 'default nil :font "Cozette" :height (* 15 10)))
(unless (daemonp)
  (apply-font-config))
(add-hook 'server-after-make-frame-hook #'apply-font-config)
#+end_src
**** Some other visual improvements
#+begin_src emacs-lisp :tangle init.el
;; requires emacs v29
(pixel-scroll-precision-mode 1)
(blink-cursor-mode 0)
#+end_src

#+begin_src emacs-lisp :tangle init.el
(use-package solaire-mode
  :config
  (solaire-global-mode +1))
#+end_src

#+begin_src emacs-lisp :tangle init.el
#+end_src

** Keybinds and movement
#+begin_src emacs-lisp :tangle init.el
(use-package which-key
  :config
  (which-key-mode))
#+end_src

#+begin_src emacs-lisp :tangle init.el
(use-package meow
  :config
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-colemak-dh)
    (setq meow-cheatsheet-physical-layout meow-cheatsheet-physical-layout-iso)
    (setq meow-expand-hint-remove-delay 3)
    (meow-motion-define-key
     ;; Use e to move up, n to move down.
     ;; Since special modes usually use n to move down, we only overwrite e here.
     '("n" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     '("?" . meow-cheatsheet)
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument))
    (meow-normal-define-key
     ;; movement
     '("n" . meow-left)
     '("N" . meow-left-expand)
     '("e" . meow-next)
     '("E" . meow-next-expand)
     '("i" . meow-prev)
     '("I" . meow-prev-expand)
     '("o" . meow-right)
     '("O" . meow-right-expand)
     '("f" . meow-find)
     '("t" . meow-till)
     ;; word movement
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("w" . meow-next-word)
     '("W" . meow-next-symbol)
     ;; arguments
     '("0" . meow-expand-0)
     '("1" . meow-expand-1)
     '("2" . meow-expand-2)
     '("3" . meow-expand-3)
     '("4" . meow-expand-4)
     '("5" . meow-expand-5)
     '("6" . meow-expand-6)
     '("7" . meow-expand-7)
     '("8" . meow-expand-8)
     '("9" . meow-expand-9)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     ;; selection
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("g" . meow-cancel-selection)
     '("h" . meow-block)
     '("H" . meow-to-block)
     '("l" . meow-line)
     ;; search
     '("/" . meow-visit)
     '("v" . meow-search)
     ;; to insert mode
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("c" . meow-change)
     '("s" . meow-insert)
     '("S" . meow-open-above)
     '("k" . meow-insert)
     '("K" . meow-open-above)
     ;; other
     '("G" . meow-grab)
     '("j" . meow-join)
     '("d" . meow-kill)
     '("x" . meow-delete)
     '("X" . meow-backward-delete)
     '("L" . meow-goto-line)
     '("m" . meow-mark-word)
     '("M" . meow-mark-symbol)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("r" . meow-replace)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("y" . meow-save)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))
  (meow-setup)
  (meow-global-mode 1))
#+end_src

The default 'scroll by buffer height' causes me to lose sight of the cursor.
We'll fix it by setting some scroll settings.

#+begin_src emacs-lisp :tangle init.el
(setq scroll-step 1)
(setq scroll-margin 10)
(setq scroll-conservatively 101)
#+end_src

** Information display
*** Dashboard
#+begin_src txt :tangle banner.txt
███████╗███╗   ███╗ █████╗  ██████╗███████╗
██╔════╝████╗ ████║██╔══██╗██╔════╝██╔════╝
█████╗  ██╔████╔██║███████║██║     ███████╗
██╔══╝  ██║╚██╔╝██║██╔══██║██║     ╚════██║
███████╗██║ ╚═╝ ██║██║  ██║╚██████╗███████║
╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚══════╝
#+end_src

#+begin_src emacs-lisp :tangle init.el
(use-package page-break-lines)
(use-package projectile)
(use-package all-the-icons)
(use-package dashboard
  :config
  (setq dashboard-icon-type 'all-the-icons)  ; use `all-the-icons' package
  (setq dashboard-startup-banner (expand-file-name "banner.txt" user-emacs-directory))
  (setq dashboard-banner-logo-title nil)
  (setq dashboard-center-content t)
  (setq initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name)))
  (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
  (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
  (dashboard-setup-startup-hook))
#+end_src
** Interactive menus and completion
#+begin_src emacs-lisp :tangle init.el
(use-package consult
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)                  ;; Alternative: consult-fd
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Tweak the register preview for `consult-register-load',
  ;; `consult-register-store' and the built-in commands.  This improves the
  ;; register formatting, adds thin separator lines, register sorting and hides
  ;; the window mode line.
  (advice-add #'register-preview :override #'consult-register-window)
  (setq register-preview-delay 0.5)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep consult-man
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
  )
#+end_src

#+begin_src emacs-lisp :tangle init.el

(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
(use-package vertico
  :custom
  ;; (vertico-scroll-margin 0) ;; Different scroll margin
  (vertico-count 20) ;; Show more candidates
  (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
  ;; (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
  :init
  (vertico-mode))
#+end_src

#+begin_src emacs-lisp :tangle init.el
(use-package corfu
  :init
  (setq tab-always-indent 'complete)
  ;; Enable auto completion and configure quitting
  (setq corfu-auto t
	corfu-quit-no-match 'separator) ;; or t
  (setq ispell-program-name (executable-find "hunspell")
        ispell-dictionary   "en_US")
  (add-hook 'corfu-mode-hook
          (lambda ()
            ;; Settings only for Corfu
            (setq-local completion-styles '(basic)
                        completion-category-overrides nil
                        completion-category-defaults nil)))
  (setq text-mode-ispell-word-completion nil)
  (global-corfu-mode))

(use-package cape
  :bind ("C-c p" . cape-prefix-map) ;; Alternative key: M-<tab>, M-p, M-+
  :init
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-elisp-block)
)
#+end_src


#+begin_src emacs-lisp
(use-package marginalia
  :config
  (marginalia-mode))

(use-package embark
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Org
mode

#+begin_src emacs-lisp :tangle init.el
(use-package org
  :ensure nil ;; use builtin
  :defer t
  :config
  (setq org-link-frame-setup '((file . find-file)))
  (setq org-src-preserve-indentation t)
  (setq org-M-RET-may-split-line nil))
(use-package org-download
  :after org
  :bind
  (:map org-mode-map
        (("s-Y" . org-download-clipboard)
         ("s-y" . org-download-yank))))
#+end_src

*** Org roam

#+begin_src emacs-lisp :tangle init.el
(use-package org-roam
  :init
  (setq org-return-follows-link t)
  (setq find-file-visit-truename t)
  (setq org-roam-v2-ack t)
  (setq split-width-threshold 0)
  (setq split-height-threshold nil)
  :custom
  (org-roam-directory "~/vault/notes-org")
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n c" . org-roam-node-capture)
	 ("C-c n d" . org-roam-dailies-goto-today)
         ("C-c n i" . org-roam-node-insert))
  :config
  (setq org-link-descriptive t) ;; hide links, and show them when the cursor is on them
  (setq org-roam-completion-everywhere t)
  (org-roam-setup)
  (org-roam-db-autosync-mode))
(use-package org-roam-ui
  :ensure (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
  :defer t
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src

*** Org ql

#+begin_src emacs-lisp :tangle init.el
(use-package org-ql
  :hook 'after-init-hook
  :defer t)
#+end_src

** LLM integration
*** gptel

My nixos configuration does not load in the my .zprofile before starting the emacs daemon.
This means that i cannot access my api keys using ~(getenv)~

To solve this we read in the ~/keys.sh file ourselves and set the env.
#+begin_src emacs-lisp :tangle init.el
(let ((env-file "~/keys.sh"))
  (when (file-exists-p env-file)
    (let ((output (with-temp-buffer
                    (call-process "sh" nil t nil "-c"
                                  (concat ". " env-file " && env"))
                    (buffer-string))))
      (dolist (line (split-string output "\n"))
        (when (string-match "\\`\\([^=]+\\)=\\(.*\\)\\'" line)
          (setenv (match-string 1 line) (match-string 2 line)))))))
#+end_src

We then need some way to read in the api keys from gptel, so we define the below two functions.

#+begin_src emacs-lisp :tangle init.el

(defun groq-api-key ()
  "returns the api key for the groq llm service"
  (getenv "GROQ_API_KEY"))
(defun gemini-api-key ()
  "returns the api key for the groq llm service"
  (getenv "GEMINI_API_KEY"))
(defun claude-api-key ()
  "returns the api key for the groq llm service"
  (getenv "CLAUDE_API_KEY"))

#+end_src

We then list out the various models from each provider and their capabilities

#+begin_src emacs-lisp :tangle init.el
;; https://console.groq.com/docs/models

#+end_src

And finaly we install and configure the gptel package.

#+begin_src emacs-lisp :tangle init.el
(use-package gptel
  :config
  ;; configure modele providers
  (gptel-make-gemini "Gemini"
		     :key #'gemini-api-key
		     :stream t)
  (gptel-make-openai "Groq"
		     :host "api.groq.com"
		     :endpoint "/openai/v1/chat/completions"
		     :key #'groq-api-key
		     :models '(llama-3.3-70b-versatile
			       llama3-70b-8192
			       llama-3.1-8b-instant
			       deepseek-r1-distill-llama-70b
			       llama3-8b-8192
			       qwen-qwq-32b
			       ))
  (gptel-make-anthropic "Claude"
			:key #'claude-api-key
			:stream t)
  (setq gptel-model 'llama-3.3-70b-versatile)
  (setq gptel-backend (gptel-get-backend "Groq"))
  (setq gptel-default-mode 'org-mode)
  )

#+end_src

** Development
*** Tools
**** Magit
#+begin_src emacs-lisp :tangle init.el
(use-package transient
  :defer t)
(use-package magit
  :defer t)
#+end_src
**** Dired

#+begin_src emacs-lisp :tangle init.el
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :config
  (setq  dired-kill-when-opening-new-dired-buffer t)
  (setq dired-dwim-target t))
#+end_src
**** direnv
#+begin_src emacs-lisp :tangle init.el
(use-package direnv
  :config
  (direnv-mode))
#+end_src
*** LSP
#+begin_src emacs-lisp :tangle init.el
(use-package flymake
  :defer t)
(use-package eglot
  :commands eglot
  :init
  (setq eglot-server-programs '(rust-mode . ("rust-analyzer"))))
#+end_src
*** Languages
**** Markdown
#+begin_src emacs-lisp :tangle init.el
(use-package markdown-mode
  :mode "\\.md\\'")
#+end_src
**** Nix
#+begin_src emacs-lisp :tangle init.el
(use-package nix-mode
  :mode "\\.nix\\'")
#+end_src
**** Rust
#+begin_src emacs-lisp :tangle init.el
(use-package rust-mode
  :mode "\\.rs\\'"
  :hook (rust-mode . eglot-ensure) ; or lsp-deferred if using lsp-mode
  :init
  (add-hook 'rust-mode-hook (lambda () (setq indent-tabs-mode nil)))
  :config
  (setq rust-mode-treesitter-derive t))

(use-package cargo
  :hook (rust-mode . cargo-minor-mode))

(use-package toml-mode
  :mode "\\.toml\\'")
#+end_src
*** Tree sitter
#+begin_src emacs-lisp :tangle init.el
;; define source definitions for various treesitter grammars
(setq treesit-language-source-alist
      '((css . ("https://github.com/tree-sitter/tree-sitter-css" "v0.20.0"))
        (go . ("https://github.com/tree-sitter/tree-sitter-go" "v0.20.0"))
        (html . ("https://github.com/tree-sitter/tree-sitter-html" "v0.20.1"))
        (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript" "v0.20.1" "src"))
        (json . ("https://github.com/tree-sitter/tree-sitter-json" "v0.20.2"))
        (markdown . ("https://github.com/ikatyang/tree-sitter-markdown" "v0.7.1"))
        (python . ("https://github.com/tree-sitter/tree-sitter-python" "v0.20.4"))
        (rust . ("https://github.com/tree-sitter/tree-sitter-rust" "v0.21.2"))
        (toml . ("https://github.com/tree-sitter/tree-sitter-toml" "v0.5.1"))
        (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "tsx/src"))
        (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "typescript/src"))
        (yaml . ("https://github.com/ikatyang/tree-sitter-yaml" "v0.5.0"))))
;; install grammar if not installed
(dolist (grammar treesit-language-source-alist)
  (unless (treesit-language-available-p (car grammar))
    (treesit-install-language-grammar (car grammar))))
;; associate each tree sitter mode with its original mode
(setq major-mode-remap-alist
      '((python-mode . python-ts-mode)
        (css-mode . css-ts-mode)
	;; (rust-mode . rust-ts-mode)
        (typescript-mode . typescript-ts-mode)
        (js2-mode . js-ts-mode)
        (bash-mode . bash-ts-mode)
        (conf-toml-mode . toml-ts-mode)
        (go-mode . go-ts-mode)
        (css-mode . css-ts-mode)
        (json-mode . json-ts-mode)
        (js-json-mode . json-ts-mode)))
#+end_src

**** Tree sitter based additions

#+begin_src emacs-lisp :tangle init.el
(use-package meow-tree-sitter
  :config
  (meow-tree-sitter-register-defaults))
#+end_src

** small library of functions


#+begin_src emacs-lisp :emacs-lisp :tangle init.el
(defvar lakrestofer/org-inbox-file "~/vault/notes-org/20250429162227-inbox.org")
(defun lakrestofer/add-to-org-roam-inbox ()
  "prompts the user for some though they had and add it to the bottom
   of my org roam inbox file"
  (interactive)
  (progn
    (org-with-file-buffer
	lakrestofer/org-inbox-file
      (let ((thought (read-from-minibuffer "thought: ")))
	(goto-char (point-max))
	(org-insert-todo-heading-respect-content)
	(insert thought)))
    (message "adding thought to inbox")))
(global-set-key (kbd "C-c n t") 'lakrestofer/add-to-org-roam-inbox)
#+end_src

* Fun
#+begin_src emacs-lisp


#+end_src
* Appendix
# This footer will promt the user to tangle on save
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
# End:


