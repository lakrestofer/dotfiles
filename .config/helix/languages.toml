[language-server.rust-analyzer]
config.cargo.buildScripts.enable = true

[[language]]
name = "c"
indent = { tab-width = 8, unit = " "}

[[language]]
name = "markdown"
scope = "source.md"
injection-regex = "md|markdown"
file-types = ["md", "markdown"]
roots = [".zk"]
language-servers = ["typos", "zk"]
auto-format = true
formatter = { command = "dprint", args = ["fmt", "--stdin", "md"]}

[[language]]
name = "tsx"
language-servers = [ "eslint", "emmet-ls", "typescript-language-server", "tailwindcss-ls"] 
formatter = { command = "prettier", args = [ "--parser", "typescript" ] } 
auto-format = true 

[[language]]
name = "typescript"
language-servers = [ "eslint", "emmet-ls", "typescript-language-server", "tailwindcss-ls"]
formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
auto-format = true

[[language]]
name = "rust"
scope = "source.rs"
injection-regex = "rs|rust"
file-types = ["rs"]
roots = ["cargo.toml"]
language-servers = ["rust-analyzer","typos"]

[[language]]
name = "svelte"
scope = "source.svelte"
injection-regex = "svelte"
file-types = ["svelte"]
indent = { tab-width = 2, unit = "  " }
language-servers = [ "svelteserver", "eslint", "tailwindcss-ls"]
auto-format = true

[[grammar]]
name = "svelte"
source = { git = "https://github.com/Himujjal/tree-sitter-svelte", rev = "be7f2e7db1fc19f0852265ec60923fc058380739" }


[[language]]
name = "go"
language-servers = ["gopls"]

[language-server.zk]
command = "zk"
args = ["lsp"]

# === sql begin ===
[language-server.sql-language-server]
command = "sql-language-server"
args = ["up", "--method", "stdio"]

[[language]]
name = "sql"
language-servers = [ "sql-language-server" ]
# === sql end ===

[language-server.gpt]
command = "helix-gpt"
args = ["--handler", "copilot"]

[language-server.eslint]
args = ["--stdio"]
command = "vscode-eslint-language-server"

[language-server.eslint.config]
# format = true
nodePath = ""
# onIgnoredFiles = "off"
# packageManager = "yarn"
quiet = false
rulesCustomizations = []
run = "onType"
# useESLintClass = false
validate = "on"
codeAction = { disableRuleComment = { enable = true, location = "separateLine" }, showDocumentation = { enable = true } }
# codeActionsOnSave = { mode = "all" }
experimental = {}
problems = { shortenToSingleLine = false }
# workingDirectory = { mode = "auto" }

[language-server.typos]
# typos-lsp must be on your PATH, or otherwise change this to an absolute path to typos-lsp
command = "typos-lsp"
# Logging level of the language server. Defaults to error.
# Run with helix -v to output LSP logs to the editor log (:log-open)
environment = {"RUST_LOG" = "error"}
# Custom config. Used together with any workspace config files, taking precedence for
# settings declared in both. Equivalent to the typos `--config` cli argument.
# config.config = "~/code/typos-lsp/crates/typos-lsp/tests/typos.toml"
# How typos are rendered in the editor, can be one of an Error, Warning, Info or Hint.
# Defaults to Warning.
config.diagnosticSeverity = "Warning"
